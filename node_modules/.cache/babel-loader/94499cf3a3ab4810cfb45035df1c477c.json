{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useContext, useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { UsersContext } from \"../../contexts\";\nimport { mapToArray } from \"../../helpers\";\nimport { api_users } from \"../../utils\"; // import {useUsers} from \"../useUsers\"\n\nconst createUserToken = async user => {\n  const newToken = Math.random().toString(36).substring(2);\n\n  try {\n    await api_users.patch(`/users/${user.id}.json`, {\n      sessionToken: newToken\n    });\n    return newToken;\n  } catch (err) {\n    return null;\n  }\n};\n\nconst useAuth = () => {\n  _s();\n\n  // const [userSession, setUserSession] = useState<User>(\n  //     JSON.parse(localStorage.getItem(\"user\")!)\n  // )\n  const [tokenStorage, setTokenStorage] = useState();\n  const {\n    setCurrentUser\n  } = useContext(UsersContext);\n  useEffect(() => {\n    tokenStorage && localStorage.setItem(\"cinemada-token\", tokenStorage);\n    console.log(\"Estoy pasando por useAuth\");\n  }, [tokenStorage]);\n  const {\n    push\n  } = useHistory();\n\n  const login = async payload => {\n    try {\n      const response = await api_users.get(\"/users.json\");\n      const users = mapToArray(response.data);\n      const loggedUser = users.find(user => user.email === payload.email && user.password === payload.password);\n\n      if (loggedUser) {\n        const token = await createUserToken(loggedUser); // return loggedUser\n\n        if (token) {\n          console.log(loggedUser);\n          setTokenStorage(token);\n          setCurrentUser === null || setCurrentUser === void 0 ? void 0 : setCurrentUser(loggedUser);\n          push(\"/\");\n        } else {\n          throw new Error(\"El usuario no existe\");\n        }\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return {\n    login\n  };\n};\n\n_s(useAuth, \"XwWzLQXN81Ws8DPQ+GXXtjKmzyY=\", false, function () {\n  return [useHistory];\n});\n\nexport { useAuth };","map":{"version":3,"sources":["C:/Users/User/Desktop/ProgramaciÃ³n/Clases Ada/proyectos/TP FINAL/cinemada/src/hooks/auth/index.ts"],"names":["useContext","useState","useEffect","useHistory","UsersContext","mapToArray","api_users","createUserToken","user","newToken","Math","random","toString","substring","patch","id","sessionToken","err","useAuth","tokenStorage","setTokenStorage","setCurrentUser","localStorage","setItem","console","log","push","login","payload","response","get","users","data","loggedUser","find","email","password","token","Error","e"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,QAArB,QAAqC,OAArC;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,UAAT,QAA2B,eAA3B;AAEA,SAASC,SAAT,QAA0B,aAA1B,C,CACA;;AAEA,MAAMC,eAAe,GAAG,MAAOC,IAAP,IAAqB;AACzC,QAAMC,QAAQ,GAAGC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,SAA3B,CAAqC,CAArC,CAAjB;;AACA,MAAG;AACC,UAAMP,SAAS,CAACQ,KAAV,CAAiB,UAASN,IAAI,CAACO,EAAG,OAAlC,EAA0C;AAACC,MAAAA,YAAY,EAAEP;AAAf,KAA1C,CAAN;AACA,WAAOA,QAAP;AACH,GAHD,CAGE,OAAMQ,GAAN,EAAU;AACR,WAAO,IAAP;AACH;AACJ,CARD;;AAUA,MAAMC,OAAO,GAAG,MAAK;AAAA;;AAEjB;AACA;AACA;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCnB,QAAQ,EAAhD;AACA,QAAM;AAACoB,IAAAA;AAAD,MAAoBrB,UAAU,CAACI,YAAD,CAApC;AAEAF,EAAAA,SAAS,CAAC,MAAK;AACXiB,IAAAA,YAAY,IAAIG,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuCJ,YAAvC,CAAhB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACH,GAHQ,EAGN,CAACN,YAAD,CAHM,CAAT;AAKA,QAAM;AAAEO,IAAAA;AAAF,MAAWvB,UAAU,EAA3B;;AAEA,QAAMwB,KAAK,GAAG,MAAOC,OAAP,IAA+B;AACrC,QAAG;AAEC,YAAMC,QAAQ,GAAG,MAAMvB,SAAS,CAACwB,GAAV,CAAc,aAAd,CAAvB;AACA,YAAMC,KAAa,GAAG1B,UAAU,CAACwB,QAAQ,CAACG,IAAV,CAAhC;AACA,YAAMC,UAAU,GAAGF,KAAK,CAACG,IAAN,CAAY1B,IAAD,IAC1BA,IAAI,CAAC2B,KAAL,KAAeP,OAAO,CAACO,KAAvB,IAAgC3B,IAAI,CAAC4B,QAAL,KAAkBR,OAAO,CAACQ,QAD3C,CAAnB;;AAGA,UAAIH,UAAJ,EAAgB;AACZ,cAAMI,KAAK,GAAG,MAAM9B,eAAe,CAAC0B,UAAD,CAAnC,CADY,CAEZ;;AACA,YAAGI,KAAH,EAAS;AACLb,UAAAA,OAAO,CAACC,GAAR,CAAYQ,UAAZ;AACAb,UAAAA,eAAe,CAACiB,KAAD,CAAf;AACAhB,UAAAA,cAAc,SAAd,IAAAA,cAAc,WAAd,YAAAA,cAAc,CAAGY,UAAH,CAAd;AACAP,UAAAA,IAAI,CAAC,GAAD,CAAJ;AACH,SALD,MAMI;AAEJ,gBAAM,IAAIY,KAAJ,CAAU,sBAAV,CAAN;AAEC;AAAC;AACb,KArBG,CAqBF,OAAOC,CAAP,EAAS;AACPf,MAAAA,OAAO,CAACC,GAAR,CAAYc,CAAZ;AACH;AAIJ,GA5BD;;AA8BA,SAAM;AAACZ,IAAAA;AAAD,GAAN;AACH,CA9CD;;GAAMT,O;UAaef,U;;;AAoCrB,SAAQe,OAAR","sourcesContent":["import { useContext, useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { UsersContext } from \"../../contexts\";\r\nimport { mapToArray } from \"../../helpers\";\r\nimport { LogUserType, User } from \"../../types/models\"\r\nimport { api_users } from \"../../utils\"\r\n// import {useUsers} from \"../useUsers\"\r\n\r\nconst createUserToken = async (user: User) =>{\r\n    const newToken = Math.random().toString(36).substring(2)\r\n    try{\r\n        await api_users.patch(`/users/${user.id}.json`, {sessionToken: newToken})\r\n        return newToken\r\n    } catch(err){\r\n        return null\r\n    }\r\n}\r\n\r\nconst useAuth = () =>{\r\n\r\n    // const [userSession, setUserSession] = useState<User>(\r\n    //     JSON.parse(localStorage.getItem(\"user\")!)\r\n    // )\r\n    const [tokenStorage, setTokenStorage] = useState <string>()\r\n    const {setCurrentUser } = useContext(UsersContext)\r\n\r\n    useEffect(() =>{\r\n        tokenStorage && localStorage.setItem(\"cinemada-token\", tokenStorage);\r\n        console.log(\"Estoy pasando por useAuth\")\r\n    }, [tokenStorage])\r\n    \r\n    const { push } = useHistory()\r\n\r\n    const login = async (payload: LogUserType) =>{\r\n            try{\r\n\r\n                const response = await api_users.get(\"/users.json\");\r\n                const users: User[] = mapToArray(response.data);\r\n                const loggedUser = users.find((user) => \r\n                    user.email === payload.email && user.password === payload.password)\r\n                    \r\n                if (loggedUser) {                \r\n                    const token = await createUserToken(loggedUser)\r\n                    // return loggedUser\r\n                    if(token){  \r\n                        console.log(loggedUser)   \r\n                        setTokenStorage(token);\r\n                        setCurrentUser?.(loggedUser);\r\n                        push(\"/\") \r\n                    }\r\n                    else{\r\n                    \r\n                    throw new Error(\"El usuario no existe\") \r\n    \r\n                    }}\r\n        } catch (e){\r\n            console.log(e)\r\n        }\r\n\r\n        \r\n        \r\n    }\r\n    \r\n    return{login}\r\n}\r\n\r\n\r\nexport{ useAuth }"]},"metadata":{},"sourceType":"module"}