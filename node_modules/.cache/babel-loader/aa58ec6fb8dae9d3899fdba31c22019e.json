{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\Programaci\\xF3n\\\\Clases Ada\\\\proyectos\\\\TP FINAL\\\\cinemada\\\\src\\\\hoc\\\\WithAuth\\\\index.tsx\";\n// import { UsersContext } from \"../../contexts\";\nimport { useAuth } from \"../../hooks/auth\"; // import { useHistory } from \"react-router-dom\";\n//Verifico si existe una sesión activa y en caso de no existir carga la pagina de Login.\n//Si hay un usuario en sesión entonces se carga el componente actual o, si vengo de logiin o sign up, tengo que\n//enviar a la pagina principal,\n// const publicRoutes = [\n//     './login',\n//     './signup'\n// ]\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst isAuthenticated = true;\n\nconst withAuth = Component => {\n  var _s = $RefreshSig$();\n\n  const Authenticated = () => {\n    _s();\n\n    // const {push} = useHistory()\n    // if(!hasUserLoggedin) push('/login');\n    // const {currentUser} = useContext(UsersContext)\n    const {\n      hasUserLoggedIn\n    } = useAuth();\n    console.log(hasUserLoggedIn);\n    return isAuthenticated ? /*#__PURE__*/_jsxDEV(Component, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 34\n    }, this) : null;\n  };\n\n  _s(Authenticated, \"pPFRx510QhHb0zbcU5lJBWTjhgU=\", false, function () {\n    return [useAuth];\n  });\n\n  return Authenticated;\n};\n\nexport { withAuth };","map":{"version":3,"sources":["C:/Users/User/Desktop/Programación/Clases Ada/proyectos/TP FINAL/cinemada/src/hoc/WithAuth/index.tsx"],"names":["useAuth","isAuthenticated","withAuth","Component","Authenticated","hasUserLoggedIn","console","log"],"mappings":";AACA;AACA,SAASA,OAAT,QAAwB,kBAAxB,C,CAGA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;;;AAEA,MAAMC,eAAe,GAAG,IAAxB;;AAMA,MAAMC,QAA8B,GAAIC,SAAD,IAAc;AAAA;;AAEjD,QAAMC,aAAgB,GAAG,MAAyB;AAAA;;AAC9C;AAEA;AAEA;AAEA,UAAM;AAACC,MAAAA;AAAD,QAAoBL,OAAO,EAAjC;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYF,eAAZ;AAEA,WAAOJ,eAAe,gBAAG,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,YAAH,GAAkB,IAAxC;AACH,GAXD;;AAFiD,KAE3CG,aAF2C;AAAA,YASnBJ,OATmB;AAAA;;AAcjD,SAAOI,aAAP;AACH,CAfD;;AAgBA,SAAQF,QAAR","sourcesContent":["import { FC } from \"react\"\r\n// import { UsersContext } from \"../../contexts\";\r\nimport { useAuth } from \"../../hooks/auth\";\r\n\r\n\r\n// import { useHistory } from \"react-router-dom\";\r\n\r\n//Verifico si existe una sesión activa y en caso de no existir carga la pagina de Login.\r\n//Si hay un usuario en sesión entonces se carga el componente actual o, si vengo de logiin o sign up, tengo que\r\n//enviar a la pagina principal,\r\n\r\n\r\n// const publicRoutes = [\r\n//     './login',\r\n//     './signup'\r\n// ]\r\n\r\nconst isAuthenticated = true\r\n\r\n\r\n\r\ntype WithAuthenticationFn = (Component:FC) => FC;\r\n\r\nconst withAuth: WithAuthenticationFn = (Component) =>{\r\n    \r\n    const Authenticated:FC = (): JSX.Element | null =>{\r\n        // const {push} = useHistory()\r\n        \r\n        // if(!hasUserLoggedin) push('/login');\r\n\r\n        // const {currentUser} = useContext(UsersContext)\r\n        \r\n        const {hasUserLoggedIn} = useAuth()\r\n        console.log(hasUserLoggedIn)\r\n        \r\n        return isAuthenticated?  <Component/> : null \r\n    }\r\n    return Authenticated\r\n}\r\nexport {withAuth}"]},"metadata":{},"sourceType":"module"}