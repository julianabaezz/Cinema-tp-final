{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\Programaci\\xF3n\\\\Clases Ada\\\\proyectos\\\\TP FINAL\\\\cinemada\\\\src\\\\hoc\\\\WithAuth\\\\index.tsx\";\n// import { UsersContext } from \"../../contexts\";\nimport { useAuth } from \"../../hooks/auth\";\nimport { Redirect, useHistory } from \"react-router-dom\"; // import { Login } from \"../../pages\";\n\nimport { Loading } from \"../../common\"; //Verifico si existe una sesión activa y en caso de no existir carga la pagina de Login.\n//Si hay un usuario en sesión entonces se carga el componente actual o, si vengo de logiin o sign up, tengo que\n//enviar a la pagina principal,\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst publicRoutes = [\"/login\", \"/signup\"];\n\nconst withAuth = Component => {\n  var _s = $RefreshSig$();\n\n  const Authenticated = () => {\n    _s();\n\n    const {\n      location\n    } = useHistory();\n    const {\n      hasUserLoggedIn\n    } = useAuth(); // const {currentUser} = useContext(UsersContext)\n\n    if (hasUserLoggedIn === undefined) return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 50\n    }, this);\n    if (hasUserLoggedIn === false && !publicRoutes.includes(location.pathname)) /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 85\n    }, this);\n    if (hasUserLoggedIn && publicRoutes.includes(location.pathname)) /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 74\n    }, this);\n    return /*#__PURE__*/_jsxDEV(Component, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 16\n    }, this);\n  };\n\n  _s(Authenticated, \"OQ9tYFcHustpaLUEY82NalmI+tI=\", false, function () {\n    return [useHistory, useAuth];\n  });\n\n  return Authenticated;\n};\n\nexport { withAuth };","map":{"version":3,"sources":["C:/Users/User/Desktop/Programación/Clases Ada/proyectos/TP FINAL/cinemada/src/hoc/WithAuth/index.tsx"],"names":["useAuth","Redirect","useHistory","Loading","publicRoutes","withAuth","Component","Authenticated","location","hasUserLoggedIn","undefined","includes","pathname"],"mappings":";AACA;AACA,SAASA,OAAT,QAAwB,kBAAxB;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,kBAArC,C,CACA;;AACA,SAASC,OAAT,QAAwB,cAAxB,C,CAEA;AACA;AACA;;;AAGA,MAAMC,YAAY,GAAG,CACjB,QADiB,EAEjB,SAFiB,CAArB;;AAQA,MAAMC,QAA8B,GAAIC,SAAD,IAAc;AAAA;;AAEjD,QAAMC,aAAgB,GAAG,MAAyB;AAAA;;AAC9C,UAAM;AAACC,MAAAA;AAAD,QAAaN,UAAU,EAA7B;AACA,UAAM;AAACO,MAAAA;AAAD,QAAoBT,OAAO,EAAjC,CAF8C,CAI9C;;AAEA,QAAGS,eAAe,KAAKC,SAAvB,EAAkC,oBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AAElC,QAAID,eAAe,KAAK,KAApB,IAA6B,CAACL,YAAY,CAACO,QAAb,CAAsBH,QAAQ,CAACI,QAA/B,CAAlC,EAA4E,qBAAC,QAAD;AAAU,MAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA;AAE5E,QAAIH,eAAe,IAAIL,YAAY,CAACO,QAAb,CAAsBH,QAAQ,CAACI,QAA/B,CAAvB,EAAiE,qBAAC,QAAD;AAAU,MAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA;AAIjE,wBAAO,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAfD;;AAFiD,KAE3CL,aAF2C;AAAA,YAG1BL,UAH0B,EAInBF,OAJmB;AAAA;;AAkBjD,SAAOO,aAAP;AACH,CAnBD;;AAoBA,SAAQF,QAAR","sourcesContent":["import { FC } from \"react\"\r\n// import { UsersContext } from \"../../contexts\";\r\nimport { useAuth } from \"../../hooks/auth\";\r\nimport { Redirect, useHistory } from \"react-router-dom\";\r\n// import { Login } from \"../../pages\";\r\nimport { Loading } from \"../../common\";\r\n\r\n//Verifico si existe una sesión activa y en caso de no existir carga la pagina de Login.\r\n//Si hay un usuario en sesión entonces se carga el componente actual o, si vengo de logiin o sign up, tengo que\r\n//enviar a la pagina principal,\r\n\r\n\r\nconst publicRoutes = [\r\n    \"/login\",\r\n    \"/signup\"\r\n]\r\n\r\n\r\ntype WithAuthenticationFn = (Component:FC) => FC;\r\n\r\nconst withAuth: WithAuthenticationFn = (Component) =>{\r\n    \r\n    const Authenticated:FC = (): JSX.Element | null =>{\r\n        const {location} = useHistory()\r\n        const {hasUserLoggedIn} = useAuth()\r\n        \r\n        // const {currentUser} = useContext(UsersContext)\r\n        \r\n        if(hasUserLoggedIn === undefined) return <Loading/>;\r\n\r\n        if (hasUserLoggedIn === false && !publicRoutes.includes(location.pathname)) <Redirect to=\"/login\"/>;\r\n        \r\n        if (hasUserLoggedIn && publicRoutes.includes(location.pathname)) <Redirect to=\"/\"/>;\r\n\r\n            \r\n        \r\n        return <Component/>\r\n    }\r\n    return Authenticated\r\n}\r\nexport {withAuth}"]},"metadata":{},"sourceType":"module"}